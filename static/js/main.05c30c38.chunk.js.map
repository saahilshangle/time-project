{"version":3,"sources":["serviceWorker.js","views/navigation.js","views/home.js","views/profile.js","views/yourposts.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","this","navSlide","burger","document","querySelector","nav","addEventListener","classList","toggle","class","to","React","Component","Home","props","state","apiResponse","mongoResponse","fetch","then","res","text","setState","callAPI","callDatabase","Profile","YourPosts","ReactDOM","render","basename","process","BASE_PATH","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCdeC,G,wLAGbC,KAAKC,a,iCAIL,IAAMC,EAASC,SAASC,cAAc,WAChCC,EAAMF,SAASC,cAAc,cAEnCF,EAAOI,iBAAiB,SAAS,WAC/BD,EAAIE,UAAUC,OAAO,oB,+BAKvB,OACI,gCACI,6BACI,oCACA,wBAAIC,MAAM,aACN,4BAAI,kBAAC,IAAD,CAAMC,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,eACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAER,yBAAKD,MAAM,UACX,yBAAKA,MAAM,UACX,yBAAKA,MAAM,UACX,yBAAKA,MAAM,YAGdT,KAAKC,c,GA/BkBU,IAAMC,YCDzBC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,QACbC,cAAe,UAJJ,E,sDASR,IAAD,OACNC,MAAM,yCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAAEN,YAAaI,S,qCAGlC,IAAD,OACXF,MAAM,uCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAG,EAAKE,SAAS,CAAEL,cAAeG,S,2CAI/CpB,KAAKuB,UACLvB,KAAKwB,iB,mCAKL,OADeN,MAAM,2C,+BAKrB,OACI,0BAAMT,MAAM,OACR,yBAAKA,MAAM,gBAEX,yBAAKA,MAAM,iBACP,2BAAIT,KAAKe,MAAMC,aACf,2BAAIhB,KAAKe,MAAME,eACf,uHAEJ,yBAAKR,MAAM,sB,GA3COE,IAAMC,WCAnBa,E,oNAMb,OACI,8BACI,wD,GARqBd,IAAMC,WCAtBc,E,oNAMb,OACI,8BACI,wD,GARuBf,IAAMC,WCS7Ce,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,0HAAYC,WAC5B,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,IAAD,CAAUvB,GAAG,UACnC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,QAAQC,UAAWrB,IACrC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,cAAcC,UAAWR,IAC3C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,WAAWC,UAAWT,MAG5CtB,SAASgC,eAAe,SL6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05c30c38.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './../App.css';\n\nexport default class Navigation extends React.Component {\n\n    componentDidMount() {\n        this.navSlide();\n    }\n\n    navSlide() {\n        const burger = document.querySelector('.burger');\n        const nav = document.querySelector('.nav-links');\n    \n        burger.addEventListener('click', () => {\n          nav.classList.toggle('.nav-active')\n        });\n      }\n\n    render() {\n        return (\n            <header>\n                <nav>\n                    <h4>Time</h4>\n                    <ul class=\"nav-links\">\n                        <li><Link to=\"/home\">Home</Link></li>\n                        <li><Link to=\"/your-posts\">Your Posts</Link></li>\n                        <li><Link to=\"/profile\">Profile</Link></li>\n                    </ul>\n                    <div class=\"burger\">\n                    <div class=\"line1\"></div>\n                    <div class=\"line2\"></div>\n                    <div class=\"line3\"></div>\n                    </div>\n                </nav>\n                {this.navSlide}\n            </header>\n        );\n    }\n}","import React from 'react';\nimport './../App.css';\n\nexport default class Home extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            apiResponse: \"First\", \n            mongoResponse: \"Second\" \n        };\n    }\n\n    // eslint-disable-next-line\n    callAPI() {\n        fetch(\"http://localhost:5000/express_backend\")\n            .then(res => res.text())\n            .then(res => this.setState({ apiResponse: res }));\n    }\n\n    callDatabase() {\n        fetch(\"http://localhost:5000/mongo_backend\")\n            .then(res => res.text())\n            .then(res =>this.setState({ mongoResponse: res}));\n    }\n\n    componentWillMount() {\n        this.callAPI();\n        this.callDatabase();\n    }\n\n    myFunction() {\n        let response = fetch(\"http://localhost:5000/express_backend\");\n        return response;\n    }\n\n    render() {\n        return (\n            <body class=\"row\">\n                <div class=\"column left\">\n                </div>\n                <div class=\"column middle\">\n                    <p>{this.state.apiResponse}</p>\n                    <p>{this.state.mongoResponse}</p>\n                    <p>Sell your time! College application review, tutoring, lessons, consultations, and more!</p>\n                </div>\n                <div class=\"column right\">\n                </div>\n            </body>\n        );\n    }\n}\n","import React from 'react';\nimport './../App.css';\n\nexport default class Profile extends React.Component {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <body>\n                <h1>This is my profile.</h1>\n            </body>\n        );\n    }\n}\n","import React from 'react';\nimport './../App.css';\n\nexport default class YourPosts extends React.Component {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <body>\n                <h1>These are my posts.</h1>\n            </body>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Redirect, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Additional views\nimport Navigation from './views/navigation.js';\nimport Home from './views/home.js';\nimport Profile from './views/profile.js';\nimport YourPosts from './views/yourposts.js';\n\nReactDOM.render(\n  <Router basename={process.env.BASE_PATH}>\n    <Navigation />\n    <Switch>\n      <Route exact path='/'><Redirect to='home' /></Route>\n      <Route exact path='/home' component={Home} />\n      <Route exact path='/your-posts' component={YourPosts} />\n      <Route exact path='/profile' component={Profile} />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}